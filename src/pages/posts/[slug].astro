---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import styles from '../../styles/blog.module.css'
// 👇importを追加
import PostFeaturedImage from '../../components/PostFeaturedImage.astro'
import TableOfContents from '../../components/notion-blocks/TableOfContents.astro'
import type { number } from 'astro/zod'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`)
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })



// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch {
          console.log('Invalid file URL: ', (block.Image || block.File)?.File?.Url)
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]
const blockData = blocks
const headingsData = blocks.filter(block => block.Type === 'heading_1' || block.Type === 'heading_2' || block.Type === 'heading_3');

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}

---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div slot="main" class={styles.main}>
    <div class={styles.post}>
      <PostTitle post={post} enableLink={true} />
      <!-- PostFeaturedImageとメタデータを包含するコンテナを追加 -->
      <div class="post-top">
        <PostFeaturedImage post={post} style="width: 100%;" />
        <!-- PostTagsとPostDateを含むdivを追加、スタイル調整 -->
        <div class="post-metadata-top">
          <PostTags post={post} />
          <PostDate post={post} />
        </div>
      </div>
      <PostBody blocks={blocks} />
      <div class="post-metadata-bottom">
      <PostTags post={post} />
      </div>
      <footer>
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </footer>
    </div>
  </div>

  <div slot="aside" class="aside">
    <BlogTagsLink heading="タグ" tags={tags} />
  </div>

  <div slot="rside" class="rside">
    <BlogPostsLink
    heading="同じタグの投稿"
    posts={postsHavingSameTag.filter(
      (p: interfaces.Post) => p.Slug !== post.Slug
    )}
    />
    <!--<BlogPostsLink heading="最近の投稿" posts={recentPosts} /> -->
    <!--notionで手動☑して表示させるやつなので一旦非表示    <BlogPostsLink heading="Recommended" posts={rankedPosts} /> -->
  </div>

  <div slot="toc" class="toc">
    <br>
    <br>
    <TableOfContents block={blockData[0]} headings={headingsData} />
  </div>
</Layout>

<style>
  .toc {
    order: 3;
    width: 280px;
    padding: 10px 10px;
    background-color: #ffffff;
    position: sticky;
    top: 0;
    height: 100vh;
  }

  .post-top {
    display: flex;
    flex-direction: column;
    align-items: left;
    width: 100%;
  }

  .post-metadata-top {
    width: 100%;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }

  .post-metadata-bottom {
  display: flex;
  justify-content: flex-end;
  }


</style>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.table-of-contents a');
    const sections = Array.from(document.querySelectorAll('section'));
    const tocTitle = document.querySelector('.toc-title'); // 目次のタイトル要素を取得

      // 目次の項目が1つもない場合はタイトルを非表示にする
      if (tocLinks.length === 0 && tocTitle) {
        tocTitle.style.display = 'none';
      }

    function onScroll() {
      let currentSectionId = '';
  
      for (let i = 0; i < sections.length; i++) {
        const section = sections[i];
        const sectionTop = section.offsetTop;
        const nextSectionTop = sections[i + 1] ? sections[i + 1].offsetTop : Infinity;
  
        if (window.scrollY >= sectionTop - 50 && window.scrollY < nextSectionTop - 50) {
          currentSectionId = section.getAttribute('id');
          break; // 現在のセクションを見つけたらループを抜ける
        }
      }
  
      tocLinks.forEach((link) => {
        if (link.getAttribute('href') === '#' + currentSectionId) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    }
  
    window.addEventListener('scroll', onScroll);
    onScroll(); // 初期位置での状態も反映
  });
  </script>