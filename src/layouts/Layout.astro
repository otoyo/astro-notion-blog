---
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'
import SearchModal from '../components/SearchModal.astro'
import SearchButton from '../components/SearchButton.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(
  getStaticFilePath('/default-og-image.png'),
  Astro.site
)

let coverImageURL: string
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch (err) {
      console.log('Invalid DB cover image URL')
    }
  }
}

let customIconURL: string
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch (err) {
    console.log('Invalid DB custom icon URL')
  }
}
---

<!doctype html>
<html lang="jaen" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content={ogImage || siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={ogImage || siteOGImage} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
  </head>
  <body class="body-background">
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <div class="container">
      <header>
        <h1>
          <a href={getNavLink('/')}>
            {
              database.Icon && database.Icon.Type === 'emoji' ? (
                <>
                  <span>{database.Icon.Emoji}</span>
                  {database.Title}
                </>
              ) : database.Icon &&
                database.Icon.Type === 'external' &&
                database.Icon.Url !==
                  'https://www.notion.so/icons/cellular_purple.svg' ? (
                <>
                  <img src={database.Icon.Url} alt="Site icon image" />
                  {database.Title}
                </>
              ) : database.Icon && database.Icon.Type === 'file' ? (
                <>
                  <img
                    src={customIconURL}
                    class="custom-icon"
                    alt="Site icon image"
                  />
                  {database.Title}
                </>
              ) : (
                database.Title
              )
            }
          </a>
        </h1>
        <div class="description">
          {database.Description}
        </div>
      </header>

      <div class="content-wrapper">
        <aside>
          <SearchButton />
          <slot name="aside" />
        </aside>
        <main>
          <div class="content">
            <slot name="main" />
          </div>
        </main>
      </div>
    </div>

    <footer>
      <div>
        <span>Copyright © 2024 pikary-box. All rights reserved.</span>
      </div>
    </footer>
    <SearchModal />
    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }
  </body>
</html>

<style>
    .body-background {
    background-color: #f4f4ff; /* お好みの色に変更 */
  }

  header {
    background-color: #ffffff;
    padding: 1.2rem;
    border-radius: 15px;
    box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.05); /* シャドウを大きく、より目立つように */
    position: relative; /* z-indexを有効にするため */
    z-index: 1; /* 他の要素より前面に */
    margin: 10px; /* 周囲の要素との間隔を確保 */
  }

  .container {
    min-height: 100vh;
    max-width: 1380px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    
  }

  .content-wrapper {
  flex: 1;
  display: flex;
  /* margin-top: 20px; */
  gap: 5px; // ここにgapを追加
  border-radius: 10px; // 角を丸くする
  /* box-shadow: inset  0px 0px 10px 1px rgba(0, 0, 0, 0.2); */
  
  }

  aside {
  width: 400px;
  background-color: #ffffff;
  /* box-shadow: inset  0px 0px 10px 1px rgba(0, 0, 0, 0.2); */
  padding: 20px;
  border-radius: 15px;
  box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.05); /* シャドウを大きく、より目立つように */
  position: relative; /* z-indexを有効にするため */
  z-index: 1; /* 他の要素より前面に */
  margin: 10px; /* 周囲の要素との間隔を確保 */
  }
  main {
  flex: 1;
  padding: 20px;
  background-color: #ffffff;
  display: flex;
  flex-direction: column;
  border-radius: 15px;
  border: 1px solid rgba(0, 0, 0, 0.1); /* ボーダーを半透明に変更 */
  box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.05); /* シャドウを大きく、より目立つように */
  position: relative; /* z-indexを有効にするため */
  z-index: 1; /* 他の要素より前面に */
  margin: 10px; /* 周囲の要素との間隔を確保 */
}

  .content {
    overflow: hidden; // はみ出しを防ぐ
    padding: 10px;
    background-color: #ffffff; // 背景色を設定
    box-shadow: inset 0px 0px 20px 10px rgba(0, 0, 0, 1); // サイズを大きく
  }

  footer {
    width: 100%;
    background-color: #f4f4ff;
    padding: 1rem 0;
    text-align: center;
  }

  @media (max-width: 1280px) {
  .container {
    padding: 0 20px;
  }

  .content-wrapper {
    flex-direction: column-reverse;
  }

  aside {
    width: 100%;
    margin-top: 20px;
  }

  main {
    margin-left: 0;
  }
}
</style>