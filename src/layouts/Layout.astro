---
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'
import SearchModal from '../components/SearchModal.astro'
import SearchButton from '../components/SearchButton.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

// const siteTitle = title ? `${title} - ${database.Title}` : database.Title
const siteTitle = "biliotech"
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(
  getStaticFilePath('/og_image.png'),
  Astro.site
)

let coverImageURL: string
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch (err) {
      console.log('Invalid DB cover image URL')
    }
  }
}

let customIconURL: string
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch (err) {
    console.log('Invalid DB custom icon URL')
  }
}
---

<!doctype html>
<html lang="jaen" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content={ogImage || siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={ogImage || siteOGImage} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
    <link rel="icon" href={getStaticFilePath('/favicon.png')} />
  </head>
  <body class="body-background">
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <div class="container">
      <a href={getNavLink('/')} >
        <div class="header">
          <div class="description">
            {database.Description}
          </div>
        </div>
      </a>

      <div class="content-wrapper">
        <aside>
          <p class="search-label">各領域で専門知識を持ったメンバーがいろいろな記事を執筆しています。普段の生活に役立つ情報活用ワザをあなたにお届けします。気になるカテゴリを最下部からクリックしてみてね。AI活用も取り入れた情報も発信しますので、気になる方はブックマークお願いします。</p>
          <SearchButton />
          <slot name="aside" />
        </aside>
        <main>
          <div class="content">
            <slot name="main" />
          </div>
        </main>
      </div>
    </div>

    <footer>
      <div>
        <span>Copyright © 2024-2025 biliotech. All rights reserved.</span>
      </div>
    </footer>
    <SearchModal />
    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }
  </body>
</html>

<style is:global>
  body {
    max-width: 1380px;
    margin: 0 auto;
  }

  code:not(pre code) {
    background-color: #ffe4fe;
    color: #a80000 !important;
    padding: 0.1em;
    border-radius: 3px;
    font-size: 0.85em;
    font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
    font-weight: bold;
  }

  .content li:not(.code li) {
    padding: 0.1rem 0;
  }

  .content li:not(.code li) code:not(pre code) {
    padding: 0.2em 0.4em;
  }
</style>

<style>
/* src/styles/blog.module.css */
.header {
  background-image: url('../images/headerImage.png'); /* デフォルト画像 */
  background-position: center;
  background-repeat: no-repeat;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: white;
  border-radius: 10px;
  /* 高さはJavaScriptで動的に設定 */
}

@media (max-width: 430px) {
  .header {
    
    background-image: url('../images/headerImage_mini.png'); /* 430px以下の場合の画像 */
    background-position: left center; /* 左端を基準に */
    background-size: contain; /* 変更 */
    object-fit: contain; /* 変更 */
  }
}

h1 a {
  font-size: 2.25rem;
  font-weight: 700;
  /* background: linear-gradient(to right, #3801ff, #fb7dff, #ae97ff, #3801ff);  削除または変更 */
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  /* background-size: 100% 100%; 削除 */
}
.body-background {
  background-color: #f4f4ff;
}

.container {
  min-height: 100vh;
  max-width: 1380px;
  padding: 10px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
}

.content-wrapper {
  flex: 1;
  display: flex;
  gap: 5px;
  border-radius: 10px;
  padding: 5px 0 0 0;
}

aside {
  width: 400px;
  max-width: calc(100% - 40px);
  padding: 20px;
  border-radius: 15px;
  box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.05);
  position: relative;
  z-index: 1;
  background-color: #ffffff;
}

aside p.search-label {
  font-size: 0.9rem; /* 例として0.9remに設定 */
}

main {
  flex: 1;
  padding: 20px;
  background-color: #ffffff;
  display: flex;
  flex-direction: column;
  border-radius: 15px;
  border: 1px solid rgba(0, 0, 0, 0.1);
  box-shadow: 0 0 8px 3px rgba(0, 0, 0, 0.05);
  position: relative;
  z-index: 1;
  overflow-x: hidden;
  word-wrap: break-word;
}

footer {
  width: 100%;
  background-color: #f4f4ff;
  padding: 1rem 0;
  text-align: center;
}

@media (max-width: 1280px) {
  .content-wrapper {
    flex-direction: column-reverse;
  }

  aside {
    width: 100%;
    margin-top: 20px;
  }

  main {
    margin-left: 0;
  }
  @media (max-width: 430px) {
    .description {
      font-size: 0.8rem;
    }
    footer {
      font-size: 0.8rem;
    }
  }
}
</style>

<script is:inline>
  function adjustHeaderHeight() {
    const header = document.querySelector('.header');
    const windowWidth = window.innerWidth;
    const aspectRatio = 1360 / 200;
    const maxHeight = 200;
    const minHeight = 50;

    // 430px以上の時のみJavaScriptで計算
    if (windowWidth > 430) {
      let headerHeight = Math.min(maxHeight, windowWidth / aspectRatio);
      headerHeight = Math.max(minHeight, headerHeight);
      header.style.height = headerHeight + 'px';
      header.style.backgroundSize = 'contain';
    } else {
      // 430px以下の場合は200pxに固定
      header.style.height = '150px';
      header.style.backgroundSize = 'cover';
    }
  }

  window.addEventListener('resize', adjustHeaderHeight);
  // 初期表示時にも実行
  adjustHeaderHeight();
</script>
