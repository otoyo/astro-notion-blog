---

---

<div class="search-modal-container">
  <div class="overlay"></div>

  <div class="search-modal">
    <div class="search-prompt">
      <input type="text" placeholder="Search..." />
    </div>
    <div class="search-result">
      <ul>
        <li class="selected">
          <a href="#">
            <div class="search-result-title"></div>
            <div class="search-result-description"></div>
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

<style>
  div.search-modal-container {
    display: none;
  }

  div.overlay {
    z-index: 99;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  div.search-modal {
    z-index: 100;
    position: fixed;
    top: 100px;
    left: 20%;
    width: 60%;
    border-radius: 6px;
    background-color: #ffffff; /* 白色に変更 */
  }
  @media (max-width: 640px) {
    div.search-modal {
      left: 0;
      width: 100%;
    }
  }

  div.search-prompt {
    /* margin: 6px 0; */
    padding: 5px 20px 10px 5px; /* 左右のパディングを20pxに変更 */
  }
  div.search-prompt input {
    width: 100%;
    border: 0px solid transparent;
    padding: 0.4rem;
    background-color: var(--input-bg);
    color: var(--fg);
    font-size: 1.2rem;
    line-height: 1.6rem;
  }

  div.search-result {
    border-top: 1px solid var(--hr-border);
  }
  div.search-result ul {
    list-style: none;
    margin: 0.3rem;
    padding: 0;
  }
  div.search-result ul > :global(li) {
  }
  div.search-result ul > :global(li > a) {
    display: block;
    padding: 0.4rem 0.6rem;
    border-radius: var(--radius);
    text-decoration: none; /* 下線を非表示にする */
  }
  div.search-result ul > :global(li.selected > a) {
    background-color: rgba(241, 241, 239, 1);
  }

  div.search-result :global(div.search-result-title) {
    padding: 0.1rem 0;
    color: #000000; /* 黒色に変更 */
    font-size: 1.1rem;
    line-height: 1.2rem;
    font-weight: bold;
  }
  div.search-result :global(div.search-result-description) {
    margin: 0 0 0.1rem;
    color: #464646; /* 黒色に変更 */
    font-size: 0.9rem;
    line-height: 1.2rem;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    let feedItems: {
      title: string
      link: string
      description: string
      pubDate: string
    }[] = [] // 型を明示的に指定
    let fetched = false
    async function openModal() {
      const modalContainer = document.querySelector('.search-modal-container')
      if (modalContainer) {
        // null チェックを追加
        if (modalContainer instanceof HTMLElement) {
          // 型チェックを追加
          modalContainer.style.display = 'block'
        }
        const searchInput = document.querySelector('.search-prompt input')
        if (searchInput) {
          // null チェックを追加
          searchInput.addEventListener('input', searchAndRender)
        }
      }
      if (!fetched) {
        await fetchRSS()
      }
      searchAndRender()
    }

    function closeModal() {
      const modalContainer = document.querySelector('.search-modal-container')
      if (modalContainer instanceof HTMLElement) {
        // 型チェックを追加
        modalContainer.style.display = 'none'
      }
    }

    function handleKeydown(event) {
      if (event.keyCode === 13) {
        // Enter
        select()
      } else if (event.keyCode === 27) {
        // ESC
        closeModal()
      } else if (event.keyCode === 38) {
        // Up
        selectUp(event)
      } else if (event.keyCode === 40) {
        // Down
        selectDown(event)
      } else {
        searchAndRender()
      }
    }

    function select() {
      const a = document.querySelector('.search-result ul > li.selected a')
      a.click()
    }

    function selectFirst() {
      const li = document.querySelector('.search-result ul > li:first-child')
      if (li) {
        li.classList.add('selected')
      }
    }

    function selectUp(event) {
      event.preventDefault()

      const ul = document.querySelector('.search-result ul')
      const selected = ul.querySelector('.selected')
      if (selected) {
        selected.classList.remove('selected')

        if (selected.previousElementSibling) {
          selected.previousElementSibling.classList.add('selected')
        } else {
          ul.lastElementChild.classList.add('selected')
        }
      } else {
        ul.lastElementChild.classList.add('selected')
      }
    }

    function selectDown(event) {
      event.preventDefault()

      const ul = document.querySelector('.search-result ul')
      const selected = ul.querySelector('.selected')
      if (selected) {
        selected.classList.remove('selected')

        if (selected.nextElementSibling) {
          selected.nextElementSibling.classList.add('selected')
        } else {
          ul.firstElementChild.classList.add('selected')
        }
      } else {
        ul.firstElementChild.classList.add('selected')
      }
    }

    function handleMouseover(event) {
      Array.from(event.target.closest('ul').children).forEach((element) => {
        element.classList.remove('selected')
      })
      event.target.closest('li').classList.add('selected')
    }

    function searchAndRender() {
      const searchInput = document.querySelector(
        '.search-prompt input'
      ) as HTMLInputElement // 型を明示的に指定
      if (!searchInput) return // null チェックを追加
      const text = searchInput.value.trim()
      // ここで入力を全角カタカナに変換
      // ここで入力を全角カタカナに変換
      const fullWidthText = toFullWidthKatakana(text)

      if (fullWidthText !== '') {
        const results = search(fullWidthText) // 変換後のテキストで検索
        renderResults(results)
      } else {
        renderResults(feedItems)
      }

      selectFirst()
    }

    function toFullWidthKatakana(str: string): string {
  const kanaMap = {
    'ｶﾞ': '\u30AC', 'ｷﾞ': '\u30AE', 'ｸﾞ': '\u30B0', 'ｹﾞ': '\u30B2', 'ｺﾞ': '\u30B4',
    'ｻﾞ': '\u30B6', 'ｼﾞ': '\u30B8', 'ｽﾞ': '\u30BA', 'ｾﾞ': '\u30BC', 'ｿﾞ': '\u30BE',
    'ﾀﾞ': '\u30C0', 'ﾁﾞ': '\u30C2', 'ﾂﾞ': '\u30C5', 'ﾃﾞ': '\u30C7', 'ﾄﾞ': '\u30C9',
    'ﾊﾞ': '\u30D0', 'ﾋﾞ': '\u30D3', 'ﾌﾞ': '\u30D6', 'ﾍﾞ': '\u30D9', 'ﾎﾞ': '\u30DC',
    'ﾊﾟ': '\u30D1', 'ﾋﾟ': '\u30D4', 'ﾌﾟ': '\u30D7', 'ﾍﾟ': '\u30DA', 'ﾎﾟ': '\u30DD',
    'ｳﾞ': '\u30F4', 'ﾜﾞ': '\u30F7', 'ｦﾞ': '\u30FA',
    'ｱ': '\u30A2', 'ｲ': '\u30A4', 'ｳ': '\u30A6', 'ｴ': '\u30A8', 'ｵ': '\u30AA',
    'ｶ': '\u30AB', 'ｷ': '\u30AD', 'ｸ': '\u30AF', 'ｹ': '\u30B1', 'ｺ': '\u30B3',
    'ｻ': '\u30B5', 'ｼ': '\u30B7', 'ｽ': '\u30B9', 'ｾ': '\u30BB', 'ｿ': '\u30BD',
    'ﾀ': '\u30BF', 'ﾁ': '\u30C1', 'ﾂ': '\u30C4', 'ﾃ': '\u30C6', 'ﾄ': '\u30C8',
    'ﾅ': '\u30CA', 'ﾆ': '\u30CB', 'ﾇ': '\u30CC', 'ﾈ': '\u30CD', 'ﾉ': '\u30CE',
    'ﾊ': '\u30CF', 'ﾋ': '\u30D2', 'ﾌ': '\u30D5', 'ﾍ': '\u30D8', 'ﾎ': '\u30DB',
    'ﾏ': '\u30DE', 'ﾐ': '\u30DF', 'ﾑ': '\u30E0', 'ﾒ': '\u30E1', 'ﾓ': '\u30E2',
    'ﾔ': '\u30E4', 'ﾕ': '\u30E6', 'ﾖ': '\u30E8',
    'ﾗ': '\u30E9', 'ﾘ': '\u30EA', 'ﾙ': '\u30EB', 'ﾚ': '\u30EC', 'ﾛ': '\u30ED',
    'ﾜ': '\u30EF', 'ｦ': '\u30F2', 'ﾝ': '\u30F3',
    'ｧ': '\u30A1', 'ｨ': '\u30A3', 'ｩ': '\u30A5', 'ｪ': '\u30A7', 'ｫ': '\u30A9',
    'ｯ': '\u30C3', 'ｬ': '\u30E3', 'ｭ': '\u30E5', 'ｮ': '\u30E7',
    '｡': '\u3002', '､': '\u3001', 'ｰ': '\u30FC', '｢': '\u300C', '｣': '\u300D', '･': '\u30FB'
  };

  const symbolMap = {
    '!': '\uFF01', '"': '\uFF02', '#': '\uFF03', '$': '\uFF04', '%': '\uFF05', '&': '\uFF06', "'": '\uFF07',
    '(': '\uFF08', ')': '\uFF09', '*': '\uFF0A', '+': '\uFF0B', ',': '\uFF0C', '-': '\uFF0D', '.': '\uFF0E',
    '/': '\uFF0F', ':': '\uFF1A', ';': '\uFF1B', '<': '\uFF1C', '=': '\uFF1D', '>': '\uFF1E', '?': '\uFF1F',
    '@': '\uFF20', '[': '\uFF3B', '\\': '\uFF3C', ']': '\uFF3D', '^': '\uFF3E', '_': '\uFF3F', '`': '\uFF40',
    '{': '\uFF5B', '|': '\uFF5C', '}': '\uFF5D', '~': '\uFF5E', ' ': '\u3000'
  };

  const combinedMap = { ...kanaMap, ...symbolMap };
  const escapedKeys = Object.keys(combinedMap).map(key => key.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
  const reg = new RegExp(`(${escapedKeys.join('|')}|[0-9A-Za-z])`, 'g');

  return str.replace(reg, (match) => {
    if (combinedMap[match]) {
      return combinedMap[match];
    } else if (match.match(/[0-9A-Za-z]/)) {
      return String.fromCharCode(match.charCodeAt(0) + 0xFEE0);
    }
    return match;
  });
}

    function search(
      query: string
    ): { title: string; link: string; description: string; pubDate: string }[] {
      const results: {
        title: string
        link: string
        description: string
        pubDate: string
      }[] = []
      const upperQuery = toFullWidthKatakana(query).toUpperCase() // 入力を全角に変換し、大文字に変換
      feedItems.forEach((item) => {
        const title = toFullWidthKatakana(item.title).toUpperCase()
        const description = item?.description
          ? toFullWidthKatakana(item.description).toUpperCase()
          : ''

        if (title.includes(upperQuery) || description.includes(upperQuery)) {
          results.push(item)
        }
      })
      return results
    }

    function renderResults(results) {
      const ul = document.querySelector('.search-result ul')
      ul.innerHTML = ''

      results.forEach((item) => {
        const li = document.createElement('li')
        const a = document.createElement('a')
        const title = document.createElement('div')
        const description = document.createElement('div')

        title.classList.add('search-result-title')
        title.textContent = item.title
        description.classList.add('search-result-description')
        description.textContent = item.description
        a.href = item.link

        li.addEventListener('mouseover', handleMouseover)

        a.appendChild(title)
        a.appendChild(description)
        li.appendChild(a)
        ul.appendChild(li)
      })
    }

    async function fetchRSS() {
      const url = new URL(location.href)
      const port = url.port ? `:${url.port}` : ''

      const res = await fetch(`${url.protocol}//${url.hostname}${port}/feed`)
      if (res.status !== 200) {
        console.log(res.status)
        throw new Error('Failed to fetch RSS feed')
      }

      const body = await res.text()

      const parser = new DOMParser()
      const xml = parser.parseFromString(body, 'text/xml')

      Array.from(xml.getElementsByTagName('item')).forEach((item) => {
        const title = item.getElementsByTagName('title')[0].textContent
        const link = item.getElementsByTagName('link')[0].textContent
        const description =
          item.getElementsByTagName('description')[0]?.textContent
        const pubDate = item.getElementsByTagName('pubDate')[0].textContent

        feedItems.push({
          title,
          link,
          description,
          pubDate,
        })
      })

      fetched = true
    }

    Array.from(document.getElementsByClassName('open-search-modal')).forEach(
      (element) => {
        element.addEventListener('click', openModal)
      }
    )
    document
      .getElementsByClassName('overlay')[0]
      .addEventListener('click', closeModal)
    document.addEventListener('keydown', handleKeydown)
  })
</script>
