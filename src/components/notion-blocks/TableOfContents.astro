---
import * as interfaces from '../../lib/interfaces.ts'
import { buildHeadingId } from '../../lib/blog-helpers.ts'
import { snakeToKebab } from '../../lib/style-helpers.ts'
import '../../styles/notion-color.css'

export interface Props {
  block: interfaces.Block
  headings: interfaces.Block[]
}

const { block, headings } = Astro.props
---

<div class="toc-title"> ▼ 目次</div>
<div class="table-of-contents">
  {
    headings.map((headingBlock: interfaces.Block) => {
      const heading =
        headingBlock.Heading1 || headingBlock.Heading2 || headingBlock.Heading3

      let indentClass = ''
      if (headingBlock.Type === 'heading_2') {
        indentClass = 'indent-1'
      } else if (headingBlock.Type === 'heading_3') {
        indentClass = 'indent-2'
      }
      
      // Colorの値をチェックし、存在しない場合はデフォルト値を使用
      const colorClass = block.TableOfContents && block.TableOfContents.Color 
                          ? snakeToKebab(block.TableOfContents.Color) 
                          : 'black-color';

      return (
        <a
          href={`#${buildHeadingId(heading)}`}
          class={`table-of-contents ${colorClass} ${indentClass}`}
        >
          {heading.RichTexts.map(
            (richText: interfaces.RichText) => richText.PlainText
          ).join('')}
        </a>
      )
    })
  }
</div>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.table-of-contents a');
    const sections = document.querySelectorAll('section');

    function onScroll() {
      let currentSectionId = '';
      sections.forEach((section) => {
        const sectionTop = section.offsetTop;
        const sectionHeight = section.offsetHeight;
        if (window.scrollY >= sectionTop - sectionHeight * 0.5 && 
            window.scrollY < sectionTop + sectionHeight - sectionHeight * 0.5) {
          currentSectionId = section.getAttribute('id');
        }
      });

      tocLinks.forEach((link) => {
        link.classList.remove('active');
        if (link.getAttribute('href') === '#' + currentSectionId) {
          link.classList.add('active');
        }
      });
    }

    window.addEventListener('scroll', onScroll);
  });
</script>


<style>
.table-of-contents {
  position: relative;
}

.table-of-contents > a {
  display: block;
  position: relative; /* 擬似要素の位置調整の基準点 */
  line-height: 1.8rem;
  font-size: 0.9rem;
  font-weight: bold;
  padding-left: 1.5rem; /* '●'とテキストの間隔を確保 */
  position: relative; /* ::beforeの絶対位置指定の基準点 */
}

.table-of-contents > a::before {
  content: '●';
  font-size: 1.8rem;
  color: rgb(245, 215, 181);
  position: absolute;
  left: -0.1rem;
  z-index: 2; /* 「●」を前面に表示 */
}

.table-of-contents > a.indent-1 {
  font-size: 0.85rem;
  font-weight: 500;
  padding-left: 2rem;
}

.table-of-contents > a.indent-1::before {
  font-size: 1.4rem; /* サイズ調整 */
  top: -0.08rem; /* 中心を揃えるための位置調整 */
  left: 0.01rem;
}

.table-of-contents > a.indent-2 {
  font-size: 0.8rem;
  font-weight: 500;
  padding-left: 2.5rem;
}

.table-of-contents > a.indent-2::before {
  font-size: 1rem; /* サイズ調整 */
  top: -0.05rem; /* 中心を揃えるための位置調整 */
  left: 0.15rem;
}

.table-of-contents > a:hover {
  background: rgba(241, 241, 239, 1) !important;
}

.table-of-contents > a::after {
  content: '';
  position: absolute;
  top: -1rem;
  left: 6px; /* ● の中心から線を開始 */
  bottom: -1rem;
  border-left: 2px solid rgb(245, 215, 181); /* 縦線を描画 */
  z-index: 1; /* 縦線を背面に表示 */
}

.table-of-contents > a:first-child::after {
  top: calc(15% + 1rem); /* 最初の項目のための調整。0.9remは●の大体の半分のサイズに相当 */
}

.table-of-contents > a:last-child::after {
  display: none; /* 最後の項目には線を表示しない */
}

.table-of-contents > a.active::before {
  color: rgb(245, 141, 22); /* アクティブな項目の●の色 */
}

</style>
