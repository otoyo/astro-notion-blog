---
import Prism from 'prismjs'
import 'prismjs/components/prism-css'
import 'prismjs/components/prism-diff'
import 'prismjs/components/prism-docker'
import 'prismjs/components/prism-elixir'
import 'prismjs/components/prism-go'
import 'prismjs/components/prism-hcl'
import 'prismjs/components/prism-java'
import 'prismjs/components/prism-json'
import 'prismjs/components/prism-python'
import 'prismjs/components/prism-ruby'
import 'prismjs/components/prism-sql'
import 'prismjs/components/prism-typescript'
import 'prismjs/components/prism-yaml'
import 'prismjs/plugins/line-numbers/prism-line-numbers.js'
import * as interfaces from '../../lib/interfaces'
import Caption from './Caption.astro'

export interface Props {
  block: interfaces.Block
}

const { block } = Astro.props

const code = block.Code.RichTexts.map(
  (richText: interfaces.RichText) => richText.Text.Content
).join('')
const language = block.Code.Language.toLowerCase()
const grammar =
  Prism.languages[language.toLowerCase()] || Prism.languages.javascript

const highlightedCode = Prism.highlight(code, grammar, language)
const lines = highlightedCode.split('\n')
---

<div class="code line-numbers">
  <div>
    <div class="code-header">
      <button class="copy" data-code={code} data-done-text="Copied!">
        Copy
      </button>
    </div>
    <div class="code-content">
      <ul class="line-numbers-rows">
        {lines.map((_, index) => (
          <li><span>{index + 1}</span></li>
        ))}
      </ul>
      <pre class="line-numbers"><code class={`language-${language}`} set:html={highlightedCode} /></pre>
    </div>
  </div>
  <Caption richTexts={block.Code.Caption} />
</div>

<script>
  import mermaid from 'mermaid'
  mermaid.initialize({ startOnLoad: true, theme: 'neutral' })
</script>

<script>
  document.querySelectorAll('button.copy').forEach((button) => {
    button.addEventListener('click', (ev) => {
      navigator.clipboard
        .writeText(ev.target.getAttribute('data-code'))
        .then(() => {
          const originalText = ev.target.innerText

          ev.target.innerText = ev.target.getAttribute('data-done-text')

          setTimeout(() => {
            ev.target.innerText = originalText
          }, 3000)
        })
    })
  })
</script>

<style is:global>
  .code {
    display: block;
    width: 100%;
    margin-bottom: 1rem;
    font-family: 'Fira Code', 'Consolas', 'Monaco', 'Andale Mono', 'Ubuntu Mono', monospace;
  }
  .code > div {
    background: #1e1e1e;
    border: 1px solid #333;
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }
  .code-header {
    display: flex;
    justify-content: flex-end;
    padding: 0.5rem;
    border-bottom: 1px solid #333;
  }
  .code button.copy {
    display: block;
    width: auto;
    padding: 0.25rem 0.75rem;
    border: none;
    border-radius: 3px;
    background-color: #4caf50;
    color: #ffffff;
    font-size: 0.8rem;
    line-height: 1.5;
    cursor: pointer;
    transition: background-color 0.2s ease;
    font-family: inherit;
    font-weight: bold;
  }
  .code button.copy:hover {
    background-color: #45a049;
  }
  .code-content {
    display: flex;
    position: relative;
  }
  .code pre {
    flex-grow: 1;
    overflow: auto;
    padding: 1rem 1rem 1rem 0;
    margin: 0;
    font-size: 0.9rem;
    line-height: 1.5;
    white-space: pre;
    word-wrap: normal;
    background-color: #1e1e1e;
    border-radius: 0 0 6px 6px;
  }
  .code .line-numbers-rows {
    flex-shrink: 0;
    width: 3rem;
    padding: 1rem 0;
    font-size: 0.9rem;
    line-height: 1.5;
    list-style: none;
    margin: 0;
    text-align: right;
    background-color: #252525;
    border-right: 1px solid #404040;
  }
  .code .line-numbers-rows li {
    padding-right: 0.5rem;
    color: #858585;
  }

  .code pre code {
    color: #e0e0e0;
    padding: 0;
    background: transparent !important;
    border-radius: 0;
    font-family: inherit;
  }

  /* シンタックスハイライトの色をカスタマイズ */
  .code pre code .token.string,
  .code pre code span.token.string {
    color: #ff9bd5 !important; /* 文字列の色を明るい緑に変更 */
  }
  .code pre code .token.comment,
  .code pre code span.token.comment {
    color: #a1c591 !important; /* コメントの色を薄い緑に変更 */
  }
  .code pre code .token.keyword,
  .code pre code span.token.keyword {
    color: #9bcffa !important; /* キーワードの色を青に変更 */
  }
  .code pre code .token.function,
  .code pre code span.token.function {
    color: #ffbc63 !important; /* 関数名の色を黄色に変更 */
  }
  .code pre code .token.number,
  .code pre code span.token.number {
    color: #b5cea8 !important; /* 数値の色を薄い緑に変更 */
  }
  .code pre code .token.operator,
  .code pre code span.token.operator {
    color: #d4d4d4 !important; /* 演算子の色を薄い灰色に変更 */
  }

  .code pre::-webkit-scrollbar-track {
    background: #2a2a2a;
    border-radius: 4px;
  }
</style>